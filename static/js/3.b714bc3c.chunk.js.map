{"version":3,"sources":["img/coder.jpeg","../../src/Path.tsx","../../src/CircularProgressbar.tsx","../../src/constants.ts","store/selectors/textSelector.js","utils/index.js","customHooks/useInterval.js","container/Timer/Timer.js","utils/markTextMatches.js","components/Profile/Profile.js","container/Game/Game.js","container/Home/Home.js","components/DivWithBackground/DivWithBackground.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","components/Error/Error.js"],"names":["module","exports","Path","className","counterClockwise","dashRatio","pathRadius","strokeWidth","style","React.createElement","Object","assign","getDashStyle","d","getPathDescription","fillOpacity","rotation","diameter","Math","PI","gapLength","strokeDasharray","strokeDashoffset","React.Component","getBackgroundPadding","this","props","background","backgroundPadding","getPathRadius","getPathRatio","value","minValue","maxValue","min","max","render","circleRatio","classes","styles","text","pathRatio","root","viewBox","cx","cy","r","trail","path","x","y","defaultProps","textSelector","state","get","randomTextSelector","lastResultSelector","textErrorSelector","textLoadingSelector","getWordsCount","str","match","length","calculateWPM","interval","wordsCount","round","useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","Timer","seconds","toggle","useState","count","setCount","minutes","floor","secondsForDrawing","timeField","P","styled","p","Mark","mark","Profile","result","user","lastResult","showEffect","Game","randomText","textLoading","textError","getRandomTextActionCreator","putLastWpmResultRequestActionCreator","inputElement","stopWatch","setStopWatch","tick","setTick","setDelay","alreadyTypedText","setAlreadyTypedText","timerToggle","setTimerToggle","color","setColor","setText","showGameContent","setShowGameContent","completionPercent","allWords","alreadyTypedWords","percent","completionPercentCalc","checkValue","i","includes","concat","setAttribute","startTimer","focus","calculatedValue","textAlign","Button","onClick","clearTimeout","setTimeout","content","Error","error","Spinner","commonId","typed","j","allText","String","prototype","slice","markTextMatches","ref","type","backgroundColor","onChange","currentTarget","disabled","connect","currentUserSelector","dispatch","bindActionCreators","getRandomTextRequest","clearRandomTextCreator","clearRandomText","getLastWpmResultActionCreator","getLastWpmResult","putLastWpmResultRequest","Home","DivWithBackground","bgImage","div","_slicedToArray","arr","Array","isArray","Symbol","iterator","toString","call","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","err","TypeError","ErrorDiv"],"mappings":"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","file":"static/js/3.b714bc3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/coder.c551ee83.jpeg\";","import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n","import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n","export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n","export const textSelector = state => state.get('textReducer');\n\nexport const randomTextSelector = state => textSelector(state).get('randomText');\nexport const lastResultSelector = state => textSelector(state).get('lastResult');\nexport const textErrorSelector = state => textSelector(state).get('textError');\nexport const textLoadingSelector = state => textSelector(state).get('textLoading');\n","export const getWordsCount = str => (str ? str.match(/\\w+/gm).length : 0);\n\nexport const calculateWPM = (interval, wordsCount) => Math.round((60 / interval) * getWordsCount(wordsCount));\n\nexport const completionPercentCalc = (allWords, alreadyTypedWords) => {\n  if (!alreadyTypedWords) {\n    return 0;\n  }\n  const percent = (getWordsCount(alreadyTypedWords) / getWordsCount(allWords)) * 100;\n  return Math.round(percent);\n};\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { useInterval } from '../../customHooks/useInterval';\n\nconst Timer = ({ seconds, delay, toggle }) => {\n  const [count, setCount] = useState(seconds);\n  const minutes = Math.floor(count / 60);\n\n  useInterval(() => {\n    if (count) {\n      setCount(count - 1);\n    }\n  }, delay);\n\n  useEffect(() => {\n    if (toggle) {\n      setCount(3);\n    } else {\n      setCount(seconds);\n    }\n  }, [toggle, seconds]);\n\n  let secondsForDrawing = (count - minutes * 60);\n  let timeField = count ? (\n    `${minutes}: ${secondsForDrawing < 10 ? (\n      `0${secondsForDrawing}`\n    ) : secondsForDrawing}`\n  ) : (' Time has finished !');\n\n  return (\n    <p className=\"timer\">\n        {toggle ? (\n          count || 'Go!'\n        ) : timeField}\n    </p>\n  );\n};\n\nTimer.propTypes = {\n  seconds: PropTypes.number.isRequired,\n  delay: PropTypes.number\n};\n\nTimer.defaultProps = {\n  delay: null\n};\n\nexport default Timer;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst P = styled.p`\n  user-select: none;\n  font-size: 1.1rem;\n  margin: 0;\n  @media screen and (max-width: 760px) {\n      font-size: 1rem;\n    }\n`;\n\nconst Mark = styled.mark`\n  user-select: auto;\n  font-weight: 300;\n  background-color: lightgreen;\n  color: #3a0135;\n  margin: 0;\n`;\n\nexport default (\n  text = '',\n  typed = '',\n  value = ''\n) => {\n  let j = 0;\n  let commonId;\n\n  if (!value && !typed) {\n    return <P>{text}</P>;\n  }\n\n  const allText = String.prototype.concat(typed, value);\n\n  for (; j < allText.length; j++) {\n    if (text[j] !== allText[j]) break;\n    if (text[j] === allText[j]) {\n      commonId = j;\n    }\n  }\n\n  return (\n    <P>\n      <Mark>\n        {text.slice(0, commonId + 1)}\n      </Mark>\n      {text.slice(commonId + 1)}\n    </P>\n  );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Immutable from 'immutable';\nimport './Profile.scss';\n\nconst Profile = ({ user, lastResult, showEffect }) => {\n  let result;\n\n  if (lastResult === null) {\n    result = user.get('lastTypeResult');\n  } else if (user.get('lastTypeResult') === null) {\n    result = lastResult;\n  } else if (user.get('lastTypeResult') !== null) {\n    result = lastResult;\n  }\n\n  return (\n    <section className=\"profile\">\n      <h3>Profile</h3>\n      <p>\n        <b>\n          {`Name: ${user.get('nickname')}`}\n          <br />\n          {`Email: ${user.get('login')}`}\n        </b>\n        <br />\n        <span className={showEffect ? 'result-area' : ''}>\n          {`Last Typing WPM Result: ${result === null ? 'No result' : result}`}\n        </span>\n      </p>\n      <br />\n    </section>\n  );\n};\n\nProfile.propTypes = {\n  user: PropTypes.instanceOf(Immutable.Map).isRequired,\n  lastResult: PropTypes.number,\n  showEffect: PropTypes.bool.isRequired\n};\n\nProfile.defaultProps = {\n  lastResult: null\n};\n\nexport default Profile;\n","import React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport Immutable from 'immutable';\nimport { CircularProgressbar } from 'react-circular-progressbar';\nimport {\n  clearRandomText,\n  getLastWpmResult,\n  getRandomTextRequest,\n  putLastWpmResultRequest\n} from '../../store/actions/textActionCreators';\nimport {\n  lastResultSelector,\n  randomTextSelector,\n  textErrorSelector,\n  textLoadingSelector\n} from '../../store/selectors/textSelector';\nimport Spinner from '../../components/Spinner/Spinner';\nimport { currentUserSelector } from '../../store/selectors/userSelector';\nimport { calculateWPM, completionPercentCalc } from '../../utils';\nimport Timer from '../Timer/Timer';\nimport { useInterval } from '../../customHooks/useInterval';\nimport 'react-circular-progressbar/dist/styles.css';\nimport Error from '../../components/Error/Error';\nimport markTextMatches from '../../utils/markTextMatches';\nimport Button from '../../components/Button/Button';\nimport Profile from '../../components/Profile/Profile';\nimport './Game.scss';\n\nlet id;\n\nconst Game = ({\n  user,\n  randomText,\n  lastResult,\n  textLoading,\n  textError,\n  getRandomTextActionCreator,\n  putLastWpmResultRequestActionCreator\n}) => {\n  const secondsInterval = 150;\n  const inputElement = useRef(null);\n  const [stopWatch, setStopWatch] = useState(0);\n  const [tick, setTick] = useState(null);\n  const [delay, setDelay] = useState(null);\n  const [alreadyTypedText, setAlreadyTypedText] = useState('');\n  const [timerToggle, setTimerToggle] = useState(true);\n  const [color, setColor] = useState(true);\n  const [text, setText] = useState('');\n  const [showGameContent, setShowGameContent] = useState(false);\n  const completionPercent = completionPercentCalc(randomText, alreadyTypedText);\n\n  const checkValue = (value, length, i) => {\n    if (!(value.includes(' '))\n        && color\n        && (length + value.length === randomText.length)\n        && value[i] === randomText[randomText.length - 1]) {\n      setAlreadyTypedText(alreadyTypedText.concat(value));\n      setText('You Are Successfully Finished...!');\n      inputElement.current.setAttribute('disabled', 'true');\n    } else if (value[i] === ' ' && color) {\n      setAlreadyTypedText(alreadyTypedText.concat(value));\n      setText('');\n    }\n  };\n\n  const handleChange = ({ currentTarget: { value } }) => {\n    setText(value);\n\n    for (let i = 0; i < value.length; i++) {\n      if (value[i] !== randomText[alreadyTypedText.length + i]) {\n        setColor(false);\n        break;\n      }\n\n      if (value[i] === randomText[alreadyTypedText.length + i]) {\n        setColor(true);\n        checkValue(value, alreadyTypedText.length, i);\n      }\n    }\n  };\n\n  const startTimer = () => {\n    setStopWatch(0);\n    setTimerToggle(false);\n    setDelay(1000);\n    inputElement.current.focus();\n    setTick(1000);\n  };\n\n  const startGame = () => {\n    getRandomTextActionCreator();\n    setText('');\n    setAlreadyTypedText('');\n    setTimerToggle(true);\n    setDelay(1000);\n    if (id) {\n      clearTimeout(id);\n    }\n    setShowGameContent(true);\n    id = setTimeout(startTimer, 4000);\n  };\n\n  useInterval(() => {\n    if (stopWatch <= secondsInterval) {\n      setStopWatch(stopWatch + 1);\n    }\n  }, tick);\n\n  useEffect(() => () => clearInterval(id), []);\n\n  useEffect(() => {\n    if (randomText === alreadyTypedText) {\n      const finalInterval = stopWatch < secondsInterval ? stopWatch : secondsInterval;\n      const result = calculateWPM(finalInterval, alreadyTypedText);\n      setTick(null);\n      setDelay(null);\n      if (stopWatch < secondsInterval) {\n        setText('Respect. You have finished ahead of schedule !');\n      }\n      putLastWpmResultRequestActionCreator(result, user.get('nickname'));\n    }\n    if (stopWatch > secondsInterval && randomText !== alreadyTypedText) {\n      const calculatedValue = calculateWPM(stopWatch, alreadyTypedText);\n      putLastWpmResultRequestActionCreator(calculatedValue, user.get('nickname'));\n      setTick(null);\n    }\n  }, [\n    randomText,\n    user,\n    putLastWpmResultRequestActionCreator,\n    alreadyTypedText,\n    stopWatch,\n  ]);\n\n  return (\n    <div className=\"game\">\n      <div className=\"profile-and-btn\">\n        <Profile\n          user={user}\n          lastResult={lastResult}\n          showEffect={!tick}\n        />\n        <section className=\"profile\" style={{ textAlign: 'center' }}>\n          <h3>Typing Game</h3>\n          <p>Calculating Words Per Minute Text Type Average Speed</p>\n          <hr />\n        </section>\n        <Button\n          onClick={startGame}\n          content=\"New Game\"\n        />\n      </div>\n      {textError && <Error error={textError} />}\n      {textLoading && <Spinner />}\n      <div className={showGameContent ? 'fadeIn' : 'fadeOut'}>\n        <div className=\"time-area\">\n          {!textError && (\n            <Timer\n              seconds={secondsInterval}\n              delay={delay}\n              toggle={timerToggle}\n            />\n          )}\n        </div>\n        <hr />\n        <div className=\"text-area\">\n          {markTextMatches(randomText, alreadyTypedText, text)}\n        </div>\n        <hr />\n        <div className=\"typing-area\">\n          <div className=\"progress-bar\">\n            <CircularProgressbar\n              value={completionPercent}\n              text={`${completionPercent}%`}\n            />\n          </div>\n          <input\n            ref={inputElement}\n            type=\"text\"\n            className=\"type-field\"\n            style={{ backgroundColor: color ? 'lightgreen' : 'lightpink' }}\n            value={text}\n            onChange={handleChange}\n            disabled={timerToggle || !tick}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nGame.propTypes = {\n  user: PropTypes.instanceOf(Immutable.Map).isRequired,\n  randomText: PropTypes.string,\n  lastResult: PropTypes.number,\n  textLoading: PropTypes.bool.isRequired,\n  textError: PropTypes.string,\n  getRandomTextActionCreator: PropTypes.func.isRequired,\n  putLastWpmResultRequestActionCreator: PropTypes.func.isRequired\n};\n\nGame.defaultProps = {\n  randomText: '',\n  lastResult: null,\n  textError: null\n};\n\nconst mapStateToProps = state => ({\n  randomText: randomTextSelector(state),\n  lastResult: lastResultSelector(state),\n  user: currentUserSelector(state),\n  textLoading: textLoadingSelector(state),\n  textError: textErrorSelector(state)\n});\n\nconst mapDispatchToProps = dispatch => bindActionCreators(\n  {\n    getRandomTextActionCreator: getRandomTextRequest,\n    clearRandomTextCreator: clearRandomText,\n    getLastWpmResultActionCreator: getLastWpmResult,\n    putLastWpmResultRequestActionCreator: putLastWpmResultRequest\n  },\n  dispatch\n);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport bgImage from '../../img/coder.jpeg';\nimport DivWithBackground from '../../components/DivWithBackground/DivWithBackground';\nimport Game from '../Game/Game';\n\nconst Home = () => {\n  return (\n    <DivWithBackground bgImage={bgImage}>\n      <Game />\n    </DivWithBackground>\n  );\n};\n\nexport default Home;\n","import styled from 'styled-components';\n\nconst DivWithBackground = styled.div`\n    //min-width: 100vw;\n    min-height: 90vh;\n    width: 100%;\n    background: url(${props => props.bgImage}) no-repeat;\n    background-size: 100% 100%;\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    justify-content: space-evenly;\n    flex-direction: column;\n    overflow-scrolling: touch;\n`;\n\nexport default DivWithBackground;\n","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === \"[object Arguments]\")) {\n    return;\n  }\n\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst ErrorDiv = styled.div`\n    text-align: center;\n    border-radius: 2.5px;\n    padding: 0.25rem;\n    background-color: darkorange;\n    font-size: 1.5rem;\n    color: whitesmoke;\n    transition: ease-out 0.2s;\n    :hover{\n      box-shadow: 0 0 16px 6px gray;\n    } \n`;\n\nconst Error = ({ error }) => <ErrorDiv><p><b>{error}</b></p></ErrorDiv>;\n\nError.propTypes = {\n  error: PropTypes.string.isRequired,\n};\n\nexport default Error;\n"],"sourceRoot":""}